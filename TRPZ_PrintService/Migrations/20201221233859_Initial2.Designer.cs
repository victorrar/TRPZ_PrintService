// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TRPZ_PrintService.Data;

namespace TRPZ_PrintService.Migrations
{
    [DbContext(typeof(TRPZ_PrintServiceContext))]
    [Migration("20201221233859_Initial2")]
    partial class Initial2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TRPZ_PrintService.Areas.Identity.Data.TRPZ_PrintServiceUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TRPZ_PrintServiceUser");
                });

            modelBuilder.Entity("TRPZ_PrintService.Data.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("MaterialId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("TRPZ_PrintService.Data.Model3D", b =>
                {
                    b.Property<int>("Model3DId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.HasKey("Model3DId");

                    b.ToTable("Models3D");
                });

            modelBuilder.Entity("TRPZ_PrintService.Data.ModelInOrder", b =>
                {
                    b.Property<int>("ModelInOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("HasSolubleSupports")
                        .HasColumnType("boolean");

                    b.Property<string>("ManagerId")
                        .HasColumnType("text");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("integer");

                    b.Property<int?>("Model3DId")
                        .HasColumnType("integer");

                    b.Property<int?>("ModelSettingsId")
                        .HasColumnType("integer");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int?>("PostProcessingId")
                        .HasColumnType("integer");

                    b.Property<int>("PriceTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("PrinterId")
                        .HasColumnType("integer");

                    b.Property<double>("Scale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(1.0);

                    b.HasKey("ModelInOrderId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("Model3DId");

                    b.HasIndex("ModelSettingsId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PostProcessingId");

                    b.HasIndex("PrinterId");

                    b.ToTable("ModelsInOrders");
                });

            modelBuilder.Entity("TRPZ_PrintService.Data.ModelSettings", b =>
                {
                    b.Property<int>("ModelSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("InfillPercentage")
                        .HasColumnType("integer");

                    b.Property<int>("LayerHeight")
                        .HasColumnType("integer");

                    b.Property<int>("NozzleDiameter")
                        .HasColumnType("integer");

                    b.HasKey("ModelSettingsId");

                    b.ToTable("ModelsSettings");
                });

            modelBuilder.Entity("TRPZ_PrintService.Data.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<int?>("PromoCodeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("TotalPrintTime")
                        .HasColumnType("interval");

                    b.HasKey("OrderId");

                    b.HasIndex("ClientId");

                    b.HasIndex("PromoCodeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TRPZ_PrintService.Data.PostProcessing", b =>
                {
                    b.Property<int>("PostProcessingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("PostProcessingId");

                    b.ToTable("PostProcessings");
                });

            modelBuilder.Entity("TRPZ_PrintService.Data.Printer", b =>
                {
                    b.Property<int>("PrinterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("BuildPlateLength")
                        .HasColumnType("integer");

                    b.Property<int>("BuildPlateWidth")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("ExtruderCount")
                        .HasColumnType("integer");

                    b.Property<int>("MaxTemp")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("PrinterId");

                    b.ToTable("Printers");
                });

            modelBuilder.Entity("TRPZ_PrintService.Data.PromoCode", b =>
                {
                    b.Property<int>("PromoCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("ActiveTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("Discount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Issue")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("PromoCodeId");

                    b.ToTable("PromoCodes");
                });

            modelBuilder.Entity("TRPZ_PrintService.Data.Client", b =>
                {
                    b.HasBaseType("TRPZ_PrintService.Areas.Identity.Data.TRPZ_PrintServiceUser");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("TRPZ_PrintService.Data.Manager", b =>
                {
                    b.HasBaseType("TRPZ_PrintService.Areas.Identity.Data.TRPZ_PrintServiceUser");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Manager");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TRPZ_PrintService.Areas.Identity.Data.TRPZ_PrintServiceUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TRPZ_PrintService.Areas.Identity.Data.TRPZ_PrintServiceUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRPZ_PrintService.Areas.Identity.Data.TRPZ_PrintServiceUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TRPZ_PrintService.Areas.Identity.Data.TRPZ_PrintServiceUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TRPZ_PrintService.Data.ModelInOrder", b =>
                {
                    b.HasOne("TRPZ_PrintService.Data.Manager", "Manager")
                        .WithMany("ModelsInOrders")
                        .HasForeignKey("ManagerId");

                    b.HasOne("TRPZ_PrintService.Data.Material", "Material")
                        .WithMany("ModelsInOrders")
                        .HasForeignKey("MaterialId");

                    b.HasOne("TRPZ_PrintService.Data.Model3D", "Model")
                        .WithMany()
                        .HasForeignKey("Model3DId");

                    b.HasOne("TRPZ_PrintService.Data.ModelSettings", "ModelSettings")
                        .WithMany()
                        .HasForeignKey("ModelSettingsId");

                    b.HasOne("TRPZ_PrintService.Data.Order", "Order")
                        .WithMany("Models")
                        .HasForeignKey("OrderId");

                    b.HasOne("TRPZ_PrintService.Data.PostProcessing", "PostProcessing")
                        .WithMany("ModelsInOrders")
                        .HasForeignKey("PostProcessingId");

                    b.HasOne("TRPZ_PrintService.Data.Printer", "Printer")
                        .WithMany()
                        .HasForeignKey("PrinterId");

                    b.Navigation("Manager");

                    b.Navigation("Material");

                    b.Navigation("Model");

                    b.Navigation("ModelSettings");

                    b.Navigation("Order");

                    b.Navigation("PostProcessing");

                    b.Navigation("Printer");
                });

            modelBuilder.Entity("TRPZ_PrintService.Data.Order", b =>
                {
                    b.HasOne("TRPZ_PrintService.Data.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId");

                    b.HasOne("TRPZ_PrintService.Data.PromoCode", "PromoCode")
                        .WithMany("Orders")
                        .HasForeignKey("PromoCodeId");

                    b.Navigation("Client");

                    b.Navigation("PromoCode");
                });

            modelBuilder.Entity("TRPZ_PrintService.Data.Material", b =>
                {
                    b.Navigation("ModelsInOrders");
                });

            modelBuilder.Entity("TRPZ_PrintService.Data.Order", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("TRPZ_PrintService.Data.PostProcessing", b =>
                {
                    b.Navigation("ModelsInOrders");
                });

            modelBuilder.Entity("TRPZ_PrintService.Data.PromoCode", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TRPZ_PrintService.Data.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TRPZ_PrintService.Data.Manager", b =>
                {
                    b.Navigation("ModelsInOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
